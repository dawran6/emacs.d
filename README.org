#+TITLE:Daw-Ran Liou's Emacs Configuration
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle init.el :results silent

This is an ongoing evolution of my original Emacs configuration files, inspired
by a bunch of resources I’ve found online:

- https://github.com/hlissner/doom-emacs
- https://github.com/daviwil/dotfiles/blob/master/Emacs.org
- https://github.com/meqif/.emacs.d
- https://github.com/raxod502/radian/blob/develop/emacs/radian.el
- https://github.com/oantolin/emacs-config
- https://github.com/mpereira/.emacs.d
- https://git.sr.ht/~technomancy/dotfiles/tree/master/item/.emacs.d
- https://luca.cambiaghi.me/vanilla-emacs/readme.html
- https://github.com/purcell/emacs.d
- https://github.com/ianpan870102/yay-evil-emacs/blob/master/config.org
- https://github.com/ianpan870102/.wsl-emacs.d
- http://sriramkswamy.github.io/dotemacs/
- https://github.com/bcmertz/dotfiles/tree/main/.emacs.d

Style guide:
- [[https://github.com/bbatsov/emacs-lisp-style-guide][bbatsov's emacs-lisp-style-guide]]

* early-init.el

From [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Early-Init-File.html][The Early Init File:]]

#+begin_quote
Most customizations for Emacs should be put in the normal init file. See Init
File. However, it is sometimes desirable to have customizations that take effect
during Emacs startup earlier than the normal init file is processed. Such
customizations can be put in the early init file, ~/.config/emacs/early-init.el
or ~/.emacs.d/early-init.el. This file is loaded before the package system and
GUI is initialized, so in it you can customize variables that affect frame
appearance as well as the package initialization process, such as
package-enable-at-startup, package-load-list, and package-user-dir.
#+end_quote

* Startup Performance

See: [[https://github.com/hlissner/doom-emacs/blob/develop/docs/faq.org#how-does-doom-start-up-so-quickly][How does Doom start up so quickly?]]

* private.el

The =private.el= file is kept out of the git version control. The file is loaded
after init.

* lisp/extras.el

My extra lisp stuffs. Credits to:

- https://github.com/raxod502/selectrum/wiki/Useful-Commands

* Keep .emacs.d Clean

Put backups and auto-save files in their own folders.

- =backups= folder is for backups.
- =auto-save-list= folder is for the auto save files.
- =custom.el= file is for the custom settings.

* straight.el

[[https://github.com/raxod502/straight.el][straight.el]] for reproducible package management.

Emacs has a built in package manager but it doesn’t make it easy to
automatically install packages on a new system the first time you pull down your
configuration. [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this
configuration to make it a lot easier to automate the installation and
configuration of everything else we use.

* Mac (OSX) ergonomics Keybindings

Several OSX native keybindings that utilizes the command key (which is also the
=super= key) are added to make context-switching to other native apps easier,
e.g. Chrome, Firefox.

- =s-t=: open scratch buffer
- =s-/=:: commenting line
- =s-'=: er/expand-region
- =s-\=: er/contract-region
- =s-p=: project-find-file
- =s-g=: magit-status
- =s-F=: rg-project

* Evil (Vim) Keybindings

- https://github.com/noctuid/evil-guide
- https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.
[[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with
which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs
modes with Vi-like keybindings for evil-mode.

- =SPC w=: evil window map
- =SPC n j=: org-journal-open-current-journal-file
- =SPC n J=: org-journal-new-entry
- =SPC n f=: org-roam-find-file
- =SPC d=: dired-jump
- =SPC e=: eshell
- =SPC g g=: magit-status
- =SPC g b=: magit-blame-addition
- =SPC g d=: magit-diff-unstaged
- =SPC g f=: magit-file-dispatch
- =SPC g l=: magit-log-buffer-file
- =SPC t c=: display-time-world
- =SPC R=: elfeed

* Emacs Keybindings

However, there are some cases where I prefer emacs style keybindings. I either
bind them to something else or just overrides them:

- Universal argument =C-u=: this is bound to =C-M-u= because I prefer =C-u= for
  scrolling.
- =C-e=: end-of-line
- =C-y=: yank
- =C-k=: kill-line
- =M-.=:: xref-find-definition
- =M-,=: xref-pop-marker-stack
- =C-x C-b=: ibuffer
- =C-M-j=: switch-to-buffer
- =M-:= : pp-eval-expression
- =M-/= : hippie-expand
- =M-o=: ace-window
- =C-M-,=: embark-act
- =C-h B=: embark-bindings
- =C-c C-d=: helpful-at-point
- =C-h C=: helpful-command
- =C-h F=: describe-face
- =C-x C-j=: dired-jump
- =C-M-'=: eshell-toggle
- =C-x g=: magit-status
- =C-c g=: magit-file-dispatch
- =M-y=: yank-pop+
- =C-x C-r=: recentf-open-files+

** Themes

Loading themes on top of one another usually have unwanted side effects of
residual faces from the previous ones. I like to keep multiple themes at
disposal at the same time. Each one of them have different emphasis and
philosophy behind. Rather than making sure the themes overrides the leftover
faces properly, the simpler way to address this is by disabling all other
enabled themes.

This is inspired by abo-abo's [[https://github.com/abo-abo/swiper/blob/master/counsel.el][counsel-load-theme-action]].

** Mode line

Pretty much the default mode line but here's the twist: no git branch info.

* Completion

I use selectrum + orderless + marginalia + ctrlf + embark

** Hippie-exp

I replaced the default ="M-/"= binding command from =dabbrev-expand= to
=hippie-expand= for all naive completions. Removing =try-expand-list= and
=try-expand-line= to avoid unbalanced parentheses. I can use =completion-at-point=
(="C-M-i"=) for lisp symbol completions.

* Tabs

I like the exaggerated tab width of 8 characters.

* Multiple Cursor Editing

I really like [[https://github.com/hlissner/evil-multiedit][evil-multiedit]] to do multiple cursor edits.

